
1. Design APIs for producer consumer problem - extended to multiple consumers
2. Design URL Shortner service: 
3. Design File storage Service like S3.
4. Design a Job schedular => 
    - scalability, fault tolerance, high availability, 
    - how scheduler picks up job? 
    - how will you take care where one job can run for 30 min and one for 30 hour?
    - how will you distribute jobs on servers ?
    - Based on frequency & time how will you execute them ? 
    - How will you notify back the user about start/stop or completion of a job ? 
    - How will your system know if a job is killed / terminated due to unknown reasons ?
    
    design refs: https://captionstrendupdategb.blogspot.com/2021/04/system-design-job-scheduler.html
    https://tianpan.co/notes/182-designing-l7-load-balancer
    

5. Design a distributed LRU Cache. Also Low level design and implement cache which expires with time.
6. Design a concurrent Hashmap
7. Write a custom lock without using synchronization key word.

8. Design a User Level Threading Library: 
    - https://leetcode.com/discuss/interview-question/operating-system/228142/Design-a-User-Level-Threading-Library
9. Implement your own spinlock
    -   https://leetcode.com/discuss/interview-question/operating-system/134290/Implement-your-own-spinlock
    -   volatile int lock = 0;
        spin_lock(volatile int *lock) {
        while(test_and_set(*lock) == 1);
        }
10. Design distributed lock.
11. Design distributed logging system.
12. Design own malloc
13. Designing Memcached or an in-memory KV store.
14. Design tic tac toe
15. Design sizeof()
16. Design mmap()
17. Design random number generator
18. Design a Logging mechanism. Should be thread safe.
19. Implementing a fair mutex:
            class fair_mutex : public sc_mutex
            {
                std::queue<sc_process_handle> s_queue;
            public:
                virtual int
                    lock()
                {

                    if (m_owner == sc_get_current_process_handle()) return 0;

                    s_queue.push(sc_get_current_process_handle());
                    while (s_queue.front() != sc_get_current_process_handle() || in_use()) {
                        sc_core::wait(m_free);
                    }
                    m_owner = sc_get_current_process_handle();
                    s_queue.pop();
                    return 0;

                }

            };

20. Design logging :
        - How you are going to initialize the Logger when the Application starts(eg. singleton instance or new object each time)?
        - Concurrency while writing logs via multiple threads.
